// <auto-generated />
using System;
using Evimiz.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Evimiz.Migrations
{
    [DbContext(typeof(Db_Evimiz))]
    [Migration("20190930211458_changesApplicationUser")]
    partial class changesApplicationUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Evimiz.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Area");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<string>("FirstPhoneNumber")
                        .HasMaxLength(7);

                    b.Property<int?>("FloorId");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFavoruite");

                    b.Property<bool>("IsPremium");

                    b.Property<bool>("IsVip");

                    b.Property<int?>("MetroId");

                    b.Property<int>("NumberKeyCodeId");

                    b.Property<int?>("NumberKeyCodeSecondId");

                    b.Property<decimal>("Price");

                    b.Property<int>("PropertyCategoryId");

                    b.Property<int>("PropertyDocumentId");

                    b.Property<int>("PropertyRepairId");

                    b.Property<DateTime>("PublishDate");

                    b.Property<int?>("RankId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RentId");

                    b.Property<int?>("RoomId");

                    b.Property<string>("SecondPhoneNumber")
                        .HasMaxLength(7);

                    b.Property<int?>("VillageId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("FloorId");

                    b.HasIndex("MetroId");

                    b.HasIndex("NumberKeyCodeId");

                    b.HasIndex("NumberKeyCodeSecondId");

                    b.HasIndex("PropertyCategoryId");

                    b.HasIndex("PropertyDocumentId");

                    b.HasIndex("PropertyRepairId");

                    b.HasIndex("RankId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RentId");

                    b.HasIndex("RoomId");

                    b.HasIndex("VillageId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("Evimiz.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AgencyImageUrl")
                        .HasMaxLength(100);

                    b.Property<string>("Agencyabout")
                        .HasMaxLength(700);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Lastname")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("NumberKeyCodeId");

                    b.Property<int?>("NumberKeyCodeSecondId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("SecondPhonenumber")
                        .HasMaxLength(7);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserImageUrl")
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("İsAgent");

                    b.Property<bool>("İsUser");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("NumberKeyCodeId");

                    b.HasIndex("NumberKeyCodeSecondId");

                    b.HasIndex("RegionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Evimiz.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Name = "Yeni tikili" },
                        new { Id = 2, Name = "Köhnə tikili" },
                        new { Id = 3, Name = "Villa" },
                        new { Id = 4, Name = "Həyət evi" },
                        new { Id = 5, Name = "Bağ evi" },
                        new { Id = 6, Name = "Ofis" },
                        new { Id = 7, Name = "Qaraj" },
                        new { Id = 8, Name = "Torpaq" },
                        new { Id = 9, Name = "Obyekt" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, Name = "Abşeron" },
                        new { Id = 2, Name = "Ağcabədi" },
                        new { Id = 3, Name = "Ağdam" },
                        new { Id = 4, Name = "Ağdaş" },
                        new { Id = 5, Name = "Ağstafa" },
                        new { Id = 6, Name = "Ağsu" },
                        new { Id = 7, Name = "Astara" },
                        new { Id = 8, Name = "Balakən" },
                        new { Id = 9, Name = "Beyləqan" },
                        new { Id = 10, Name = "Bakı" },
                        new { Id = 11, Name = "Bərdə" },
                        new { Id = 12, Name = "Biləsuvar" },
                        new { Id = 13, Name = "Cəbrayıl" },
                        new { Id = 14, Name = "Cəlilabad" },
                        new { Id = 15, Name = "Daşkəsən" },
                        new { Id = 16, Name = "Gədəbəy" },
                        new { Id = 17, Name = "Goranboy" },
                        new { Id = 18, Name = "Göyçay" },
                        new { Id = 19, Name = "Göygöl" },
                        new { Id = 20, Name = "Hacıqabul" },
                        new { Id = 21, Name = "Xaçmaz" },
                        new { Id = 22, Name = "Xızı" },
                        new { Id = 23, Name = "Xocalı" },
                        new { Id = 24, Name = "Xocavənd" },
                        new { Id = 25, Name = "İmişli" },
                        new { Id = 26, Name = "İsmayıllı" },
                        new { Id = 27, Name = "Kəlbəcər" },
                        new { Id = 28, Name = "Kürdəmir" },
                        new { Id = 29, Name = "Qax" },
                        new { Id = 30, Name = "Qazax" },
                        new { Id = 31, Name = "Qəbələ" },
                        new { Id = 32, Name = "Qobustan" },
                        new { Id = 33, Name = "Quba" },
                        new { Id = 34, Name = "Qubadlı" },
                        new { Id = 35, Name = "Qusar" },
                        new { Id = 36, Name = "Laçın" },
                        new { Id = 37, Name = "Lerik" },
                        new { Id = 38, Name = "Lənkəran" },
                        new { Id = 39, Name = "Masallı" },
                        new { Id = 40, Name = "Neftçala" },
                        new { Id = 41, Name = "Oğuz" },
                        new { Id = 42, Name = "Saatlı" },
                        new { Id = 43, Name = "Sabirabad" },
                        new { Id = 44, Name = "Salyan" },
                        new { Id = 45, Name = "Samux" },
                        new { Id = 46, Name = "Siyəzən" },
                        new { Id = 47, Name = "Şabran" },
                        new { Id = 48, Name = "Şamaxı" },
                        new { Id = 49, Name = "Şəki" },
                        new { Id = 50, Name = "Şəmkir" },
                        new { Id = 51, Name = "Şuşa" },
                        new { Id = 52, Name = "Tərtər" },
                        new { Id = 53, Name = "Tovuz" },
                        new { Id = 54, Name = "Ucar" },
                        new { Id = 55, Name = "Yardımlı" },
                        new { Id = 56, Name = "Yevlax" },
                        new { Id = 57, Name = "Zaqatala" },
                        new { Id = 58, Name = "Zəngilan" },
                        new { Id = 59, Name = "Zərdab" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new { Id = 1, Count = 1 },
                        new { Id = 2, Count = 2 },
                        new { Id = 3, Count = 3 },
                        new { Id = 4, Count = 4 },
                        new { Id = 5, Count = 5 },
                        new { Id = 6, Count = 6 },
                        new { Id = 7, Count = 7 },
                        new { Id = 8, Count = 8 },
                        new { Id = 9, Count = 9 },
                        new { Id = 10, Count = 10 },
                        new { Id = 11, Count = 11 },
                        new { Id = 12, Count = 12 },
                        new { Id = 13, Count = 13 },
                        new { Id = 14, Count = 14 },
                        new { Id = 15, Count = 15 },
                        new { Id = 16, Count = 16 },
                        new { Id = 17, Count = 17 },
                        new { Id = 18, Count = 18 },
                        new { Id = 19, Count = 19 },
                        new { Id = 20, Count = 20 },
                        new { Id = 21, Count = 21 },
                        new { Id = 22, Count = 22 },
                        new { Id = 23, Count = 23 },
                        new { Id = 24, Count = 24 },
                        new { Id = 25, Count = 25 },
                        new { Id = 26, Count = 26 },
                        new { Id = 27, Count = 27 },
                        new { Id = 28, Count = 29 },
                        new { Id = 30, Count = 30 },
                        new { Id = 31, Count = 31 },
                        new { Id = 32, Count = 32 },
                        new { Id = 33, Count = 33 },
                        new { Id = 34, Count = 34 },
                        new { Id = 35, Count = 35 },
                        new { Id = 36, Count = 36 },
                        new { Id = 37, Count = 37 },
                        new { Id = 38, Count = 38 },
                        new { Id = 39, Count = 39 },
                        new { Id = 40, Count = 40 }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.Property<bool>("IsMainPhoto");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Evimiz.Models.Metro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Metros");

                    b.HasData(
                        new { Id = 1, Name = "20 yanvar m." },
                        new { Id = 2, Name = "28 May m." },
                        new { Id = 3, Name = "Avtovağzal m." },
                        new { Id = 4, Name = "Azadlıq prospekti m." },
                        new { Id = 5, Name = "Bakmil m." },
                        new { Id = 6, Name = "Cəfər Cabbarlı m." },
                        new { Id = 7, Name = "Dərnəgül m." },
                        new { Id = 8, Name = "Elmlər Akademiyası m." },
                        new { Id = 9, Name = "Gənclik m." },
                        new { Id = 10, Name = "Həzi Aslanov m." },
                        new { Id = 11, Name = "İçəri Şəhər m." },
                        new { Id = 12, Name = "İnşaatçılar m." },
                        new { Id = 13, Name = "Koroğlu m." },
                        new { Id = 14, Name = "Memar Əcəmi m." },
                        new { Id = 15, Name = "Neftçilər m." },
                        new { Id = 16, Name = "Nizami m." },
                        new { Id = 17, Name = "Nəriman Nərimanov m." },
                        new { Id = 18, Name = "Nəsimi m." },
                        new { Id = 19, Name = "Qara Qarayev m." },
                        new { Id = 20, Name = "Şah İsmayıl Xətai m." },
                        new { Id = 21, Name = "Sahil m." },
                        new { Id = 22, Name = "Ulduz m." },
                        new { Id = 23, Name = "Xalqlar Dostluğu m." },
                        new { Id = 24, Name = "Əhmədli m." }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100);

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("Newss");
                });

            modelBuilder.Entity("Evimiz.Models.NumberKeyCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kcode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("NumberKeyCodes");

                    b.HasData(
                        new { Id = 1, Kcode = "050" },
                        new { Id = 2, Kcode = "051" },
                        new { Id = 3, Kcode = "055" },
                        new { Id = 4, Kcode = "070" },
                        new { Id = 5, Kcode = "077" },
                        new { Id = 6, Kcode = "040" },
                        new { Id = 7, Kcode = "060" },
                        new { Id = 8, Kcode = "012" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.NumberKeyCodeSecond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kcode");

                    b.HasKey("Id");

                    b.ToTable("NumberKeyCodeSecondS");

                    b.HasData(
                        new { Id = 1, Kcode = "050" },
                        new { Id = 2, Kcode = "051" },
                        new { Id = 3, Kcode = "055" },
                        new { Id = 4, Kcode = "070" },
                        new { Id = 5, Kcode = "077" },
                        new { Id = 6, Kcode = "040" },
                        new { Id = 7, Kcode = "060" },
                        new { Id = 8, Kcode = "012" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstLastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstNumber")
                        .HasMaxLength(7);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastNumber")
                        .HasMaxLength(7);

                    b.Property<int>("NumberKeyCodeId");

                    b.Property<int?>("NumberKeyCodeSecondId");

                    b.Property<int>("PropertyCategoryId");

                    b.Property<int?>("RentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("NumberKeyCodeId");

                    b.HasIndex("NumberKeyCodeSecondId");

                    b.HasIndex("PropertyCategoryId");

                    b.HasIndex("RentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Evimiz.Models.PropertyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PropertyCategorys");

                    b.HasData(
                        new { Id = 1, Name = "Satılır" },
                        new { Id = 2, Name = "Kirayə" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.PropertyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PropertyDocuments");

                    b.HasData(
                        new { Id = 1, Name = "Müqavilə" },
                        new { Id = 2, Name = "Sərəncam" },
                        new { Id = 3, Name = "Qeydiyyat vəsiqəsi" },
                        new { Id = 4, Name = "Şəhadətnamə" },
                        new { Id = 5, Name = "Bələdiyə sənədi" },
                        new { Id = 6, Name = "Kupça" },
                        new { Id = 7, Name = "Digər sənəd" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.PropertyRepair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PropertyRepairs");

                    b.HasData(
                        new { Id = 1, Name = "Təmirsiz" },
                        new { Id = 2, Name = "Natamam təmirli" },
                        new { Id = 3, Name = "Zəif təmirli" },
                        new { Id = 4, Name = "Orta təmirli" },
                        new { Id = 5, Name = "Yaxşı təmirli" },
                        new { Id = 6, Name = "Əla təmirli" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new { Id = 1, Count = 1 },
                        new { Id = 2, Count = 2 },
                        new { Id = 3, Count = 3 },
                        new { Id = 4, Count = 4 },
                        new { Id = 5, Count = 5 },
                        new { Id = 6, Count = 6 },
                        new { Id = 7, Count = 7 },
                        new { Id = 8, Count = 8 },
                        new { Id = 9, Count = 9 },
                        new { Id = 10, Count = 10 },
                        new { Id = 11, Count = 11 },
                        new { Id = 12, Count = 12 },
                        new { Id = 13, Count = 13 },
                        new { Id = 14, Count = 14 },
                        new { Id = 15, Count = 15 },
                        new { Id = 16, Count = 16 },
                        new { Id = 17, Count = 17 },
                        new { Id = 18, Count = 18 },
                        new { Id = 19, Count = 19 },
                        new { Id = 20, Count = 20 },
                        new { Id = 21, Count = 21 },
                        new { Id = 22, Count = 22 },
                        new { Id = 23, Count = 23 },
                        new { Id = 24, Count = 24 },
                        new { Id = 25, Count = 25 },
                        new { Id = 26, Count = 26 },
                        new { Id = 27, Count = 27 },
                        new { Id = 28, Count = 29 },
                        new { Id = 30, Count = 30 },
                        new { Id = 31, Count = 31 },
                        new { Id = 32, Count = 32 },
                        new { Id = 33, Count = 33 },
                        new { Id = 34, Count = 34 },
                        new { Id = 35, Count = 35 },
                        new { Id = 36, Count = 36 },
                        new { Id = 37, Count = 37 },
                        new { Id = 38, Count = 38 },
                        new { Id = 39, Count = 39 },
                        new { Id = 40, Count = 40 }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Regions");

                    b.HasData(
                        new { Id = 1, CityId = 10, Name = "Abşeron r." },
                        new { Id = 2, CityId = 10, Name = "Binəqədi r." },
                        new { Id = 3, CityId = 10, Name = "Nizami r." },
                        new { Id = 4, CityId = 10, Name = "Nərimanov r." },
                        new { Id = 5, CityId = 10, Name = "Nəsimi r." },
                        new { Id = 6, CityId = 10, Name = "Pirallahı" },
                        new { Id = 7, CityId = 10, Name = "Qaradağ r." },
                        new { Id = 8, CityId = 10, Name = "Sabunçu r." },
                        new { Id = 9, CityId = 10, Name = "Suraxanı r." },
                        new { Id = 10, CityId = 10, Name = "Səbail r." },
                        new { Id = 11, CityId = 10, Name = "Xətai r." },
                        new { Id = 12, CityId = 10, Name = "Xəzər r." },
                        new { Id = 13, CityId = 10, Name = "Yasamal r." }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Rents");

                    b.HasData(
                        new { Id = 1, Name = "Aylıq" },
                        new { Id = 2, Name = "Günluk" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Count")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Room");

                    b.HasData(
                        new { Id = 1, Count = "1" },
                        new { Id = 2, Count = "2" },
                        new { Id = 3, Count = "3" },
                        new { Id = 4, Count = "4" },
                        new { Id = 5, Count = "5" },
                        new { Id = 6, Count = "5+" }
                    );
                });

            modelBuilder.Entity("Evimiz.Models.Village", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Villages");

                    b.HasData(
                        new { Id = 1, Name = "1mkr" },
                        new { Id = 2, Name = "2mkr" },
                        new { Id = 3, Name = "20-ci sahə" },
                        new { Id = 4, Name = "28 May" },
                        new { Id = 5, Name = "3mkr" },
                        new { Id = 6, Name = "4mkr" },
                        new { Id = 7, Name = "5mkr" },
                        new { Id = 8, Name = "6mkr" },
                        new { Id = 9, Name = "7mkr" },
                        new { Id = 10, Name = "8mkr" },
                        new { Id = 11, Name = "9mkr" },
                        new { Id = 12, Name = "Ağ şəhər" },
                        new { Id = 13, Name = "Alatava 1" },
                        new { Id = 14, Name = "Alatava 2" },
                        new { Id = 15, Name = "Badamdar" },
                        new { Id = 16, Name = "Bahar" },
                        new { Id = 17, Name = "Bakixanov" },
                        new { Id = 18, Name = "Balaxnı" },
                        new { Id = 19, Name = "Bayıl" },
                        new { Id = 20, Name = "Bibiheybət" },
                        new { Id = 21, Name = "Bilgəh" },
                        new { Id = 22, Name = "Biləcəri" },
                        new { Id = 23, Name = "Binə" },
                        new { Id = 24, Name = "Binəqədi" },
                        new { Id = 25, Name = "Böyükşor" },
                        new { Id = 26, Name = "Bülbülə" },
                        new { Id = 27, Name = "Buzovna" },
                        new { Id = 28, Name = "Çermet " },
                        new { Id = 29, Name = "Ceyranbatan" },
                        new { Id = 30, Name = "Çiçək" },
                        new { Id = 31, Name = "Corat" },
                        new { Id = 32, Name = "Digah" },
                        new { Id = 33, Name = "Dübəndi bağları" },
                        new { Id = 34, Name = "Dədə Qorqud" },
                        new { Id = 35, Name = "Fatmayı" },
                        new { Id = 36, Name = "Görədil" },
                        new { Id = 37, Name = "Güzdək" },
                        new { Id = 38, Name = "Hökməli" },
                        new { Id = 39, Name = "Hövsan" },
                        new { Id = 40, Name = "Həzi Aslanov merkez" },
                        new { Id = 41, Name = "Keşlə" },
                        new { Id = 42, Name = "Kimya şəhərciyi" },
                        new { Id = 43, Name = "Köhnə Günəşli" },
                        new { Id = 44, Name = "Kürdəxanı " },
                        new { Id = 45, Name = "Lökbatan" },
                        new { Id = 46, Name = "Ləhic Bağları" },
                        new { Id = 47, Name = "Masazır" },
                        new { Id = 48, Name = "Maştağa" },
                        new { Id = 49, Name = "Mehdiabad" },
                        new { Id = 50, Name = "Montin" },
                        new { Id = 51, Name = "Müşfiqabad" },
                        new { Id = 52, Name = "Məhəmmədli" },
                        new { Id = 53, Name = "Mərdəkan" },
                        new { Id = 54, Name = "Nardaran" },
                        new { Id = 55, Name = "Nasosnu" },
                        new { Id = 56, Name = "Novxanı" },
                        new { Id = 57, Name = "Nübar" },
                        new { Id = 58, Name = "NZS" },
                        new { Id = 59, Name = "Papanin" },
                        new { Id = 60, Name = "Perekeşkül" },
                        new { Id = 61, Name = "Pirşağı" },
                        new { Id = 62, Name = "Puta" },
                        new { Id = 63, Name = "Qala" },
                        new { Id = 64, Name = "Qara şəhər" },
                        new { Id = 65, Name = "Qaraçuxur" },
                        new { Id = 66, Name = "Qızıldaş" },
                        new { Id = 67, Name = "Qobu" },
                        new { Id = 68, Name = "Qobustan" },
                        new { Id = 69, Name = "Ramana" },
                        new { Id = 70, Name = "Rəsulzadə" },
                        new { Id = 71, Name = "Sabunçu" },
                        new { Id = 72, Name = "Şağan" },
                        new { Id = 73, Name = "Sahil" },
                        new { Id = 74, Name = "Saray" },
                        new { Id = 75, Name = "Savalan" },
                        new { Id = 76, Name = "Şıxov" },
                        new { Id = 77, Name = "Şubanı" },
                        new { Id = 78, Name = "Sulutəpə" },
                        new { Id = 79, Name = "Şuşa" },
                        new { Id = 80, Name = "Şüvəlan" },
                        new { Id = 81, Name = "Səngəçal" },
                        new { Id = 82, Name = "Türkan" },
                        new { Id = 83, Name = "Ümid" },
                        new { Id = 84, Name = "Xaşaxuna" },
                        new { Id = 85, Name = "Xocəsən" },
                        new { Id = 86, Name = "Xutor" },
                        new { Id = 87, Name = "Y.Günəşli" },
                        new { Id = 88, Name = "Y.Ramana" },
                        new { Id = 89, Name = "Y.Suraxanı" },
                        new { Id = 90, Name = "Yeni Yasamal" },
                        new { Id = 91, Name = "Y.Suraxanı" },
                        new { Id = 92, Name = "Zabrat 1" },
                        new { Id = 93, Name = "Zabrat 2" },
                        new { Id = 94, Name = "Zağulba" },
                        new { Id = 95, Name = "Zığ" },
                        new { Id = 96, Name = "Zirə" },
                        new { Id = 97, Name = "Əhmədli" },
                        new { Id = 98, Name = "Ələt" },
                        new { Id = 99, Name = "Əmircan" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Evimiz.Models.Advertisement", b =>
                {
                    b.HasOne("Evimiz.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Advertisements")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Evimiz.Models.Category", "Category")
                        .WithMany("Advertisements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.City", "City")
                        .WithMany("Advertisements")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.Floor", "Floor")
                        .WithMany("Advertisements")
                        .HasForeignKey("FloorId");

                    b.HasOne("Evimiz.Models.Metro", "Metro")
                        .WithMany("Advertisements")
                        .HasForeignKey("MetroId");

                    b.HasOne("Evimiz.Models.NumberKeyCode", "NumberKeyCode")
                        .WithMany("Advertisements")
                        .HasForeignKey("NumberKeyCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.NumberKeyCodeSecond", "NumberKeyCodeSecond")
                        .WithMany("Advertisements")
                        .HasForeignKey("NumberKeyCodeSecondId");

                    b.HasOne("Evimiz.Models.PropertyCategory", "PropertyCategory")
                        .WithMany("Advertisements")
                        .HasForeignKey("PropertyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.PropertyDocument", "PropertyDocument")
                        .WithMany("Advertisements")
                        .HasForeignKey("PropertyDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.PropertyRepair", "PropertyRepair")
                        .WithMany("Advertisements")
                        .HasForeignKey("PropertyRepairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.Rank", "Rank")
                        .WithMany("Advertisements")
                        .HasForeignKey("RankId");

                    b.HasOne("Evimiz.Models.Region", "Region")
                        .WithMany("Advertisement")
                        .HasForeignKey("RegionId");

                    b.HasOne("Evimiz.Models.Rent", "Rent")
                        .WithMany("Advertisements")
                        .HasForeignKey("RentId");

                    b.HasOne("Evimiz.Models.Room", "Room")
                        .WithMany("Advertisements")
                        .HasForeignKey("RoomId");

                    b.HasOne("Evimiz.Models.Village", "Village")
                        .WithMany("Advertisements")
                        .HasForeignKey("VillageId");
                });

            modelBuilder.Entity("Evimiz.Models.ApplicationUser", b =>
                {
                    b.HasOne("Evimiz.Models.NumberKeyCode", "NumberKeyCode")
                        .WithMany()
                        .HasForeignKey("NumberKeyCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.NumberKeyCodeSecond", "NumberKeyCodeSecond")
                        .WithMany()
                        .HasForeignKey("NumberKeyCodeSecondId");

                    b.HasOne("Evimiz.Models.Region", "Region")
                        .WithMany("İstifadəçilər")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Evimiz.Models.Image", b =>
                {
                    b.HasOne("Evimiz.Models.Advertisement", "Advertisement")
                        .WithMany("Images")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Evimiz.Models.Order", b =>
                {
                    b.HasOne("Evimiz.Models.NumberKeyCode", "NumberKeyCode")
                        .WithMany()
                        .HasForeignKey("NumberKeyCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.NumberKeyCodeSecond", "NumberKeyCodeSecond")
                        .WithMany()
                        .HasForeignKey("NumberKeyCodeSecondId");

                    b.HasOne("Evimiz.Models.PropertyCategory", "PropertyCategory")
                        .WithMany("Orders")
                        .HasForeignKey("PropertyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.Rent", "Rent")
                        .WithMany("Orders")
                        .HasForeignKey("RentId");
                });

            modelBuilder.Entity("Evimiz.Models.Region", b =>
                {
                    b.HasOne("Evimiz.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Evimiz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Evimiz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Evimiz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Evimiz.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
